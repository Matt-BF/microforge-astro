---
import { storyblokEditable, renderRichText } from "@storyblok/astro";
import AddToCartForm from "../components/AddToCartForm.svelte";
const { blok } = Astro.props;
const description = renderRichText(blok.description);

const paths = Astro.url.pathname.split("/").filter((path) => path !== "");
---

<article {...storyblokEditable(blok)}>
  <nav>
    <ul class="ml-20 flex justify-start">
      {
        paths.map((path, index) => (
          <li class="mx-1">
            <a
              class="border-b-2 border-b-transparent text-teal-900 hover:border-b-teal-900 hover:text-teal-800"
              href={`/${paths.slice(0, index + 1).join("/")}`}
            >
              {path}
            </a>
            {index != paths.length - 1 && <>/</>}
          </li>
        ))
      }
    </ul>
  </nav>
  <h1 class="pt-10 pb-5 text-center text-3xl text-teal-900">
    {blok.name}
  </h1>
  <hr class="m-auto mb-5 w-1/2" />
  <div class="mb-24 grid md:grid-cols-2">
    <div>
      <img
        src={blok.image}
        class="mx-auto w-1/2 md:ml-auto md:mr-20 lg:w-1/4"
        alt={blok.name}
      />
    </div>

    <div class="flex flex-col items-center justify-center md:items-start">
      <AddToCartForm client:load>
        <div>
          <input type="hidden" name="name" value={blok.name} />
          <input type="hidden" name="imageSrc" value={blok.image} />

          {
            blok.sizes && (
              <>
                <label class="mr-3 text-xl" for="size">
                  Conformação
                </label>
                <select name="size" class="bg-white p-2">
                  {blok.sizes.map((size) => (
                    <option value={size}>{size}</option>
                  ))}
                </select>
              </>
            )
          }
        </div>
        <div class="my-5">
          <label class="text-xl" for="quantity">Quantidade:</label>
          <input
            name="quantity"
            id="qty"
            value="1"
            class="w-20 text-center text-xl"
            type="number"
            min="1"
          />
        </div>
        <button
          class="rounded-xl bg-teal-900 p-2 text-white hover:bg-amber-400"
          type="submit">Adicionar à cotação</button
        >
      </AddToCartForm>
    </div>
  </div>
  <div class="mb-10 text-center">
    Precisa de ajuda?
    <a
      target="_blank"
      class="text-teal-900 hover:text-teal-800 hover:decoration-solid"
      href={`https://api.whatsapp.com/send?phone=5519999453544&text=Ol%C3%A1!%20Gostaria%20de%20mais%20informa%C3%A7%C3%B5es%20sobre%20o%20produto%20${blok.name}`}
      >Fale com nossos cientistas!</a
    >
  </div>

  <div
    class="prose mx-10 text-justify text-lg prose-h3:mb-4 prose-h3:text-teal-900 prose-p:mb-8 md:mx-auto"
    set:html={description}
  />
  {
    blok.related_products.length > 0 && (
      <>
        <h2 class="mb-8 text-center text-xl text-teal-900">
          Produtos relacionados
        </h2>
        <div class="mb-8 grid grid-cols-1 place-items-center gap-4 md:grid-cols-3">
          {blok.related_products.map((product) => (
            <a
              class="w-10/12 rounded-md border transition-all duration-300 hover:scale-105 hover:border-teal-600"
              href={`/${product.full_slug}`}
            >
              <h3 class="p-2 text-center text-lg text-teal-900">
                {product.name}
              </h3>

              <img
                class="mx-auto mb-5 rounded-md hover:opacity-75 md:w-1/2 lg:w-1/4"
                src={product.content.image}
                alt={product.name}
              />
            </a>
          ))}
        </div>
      </>
    )
  }
</article>

<script>
  function parseQty() {
    const quantityInput = document.querySelector("input[name=quantity]");
    const quantity = parseInt(quantityInput.value);
    if (quantity < 1 || isNaN(quantity)) {
      quantityInput.value = 1;
    }
  }
  document
    .querySelector("input[name=quantity]")
    .addEventListener("change", parseQty);
</script>
